// Light that scales in size according to the value passed as the alpha amount
class AlphaLight : DynamicLight
{
	Color clr;
	double maxradius;
	Vector3 spawnoffset;
	int flickertime;

	Property LightColor:clr;
	Property LightRadius:maxradius;

	Default
	{
		DynamicLight.Type "Point";
		AlphaLight.LightColor 0xFFFFFF;
		AlphaLight.LightRadius 16;
	}

	override void BeginPlay ()
	{
		alpha = 0;

		args[LIGHT_RED] = clr.r;
		args[LIGHT_GREEN] = clr.g;
		args[LIGHT_BLUE] = clr.b;
		args[LIGHT_INTENSITY] = int(maxradius * scale.y * alpha);

		Super.BeginPlay();
	}

	override void PostBeginPlay()
	{
		bDormant = SpawnFlags & MTF_DORMANT;

		if (master)
		{
			spawnoffset = pos - master.pos;

			Vector2 temp = RotateVector((spawnoffset.x, spawnoffset.y), -master.angle);
			spawnoffset = (temp.x, temp.y, spawnoffset.z);
		}

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		args[LIGHT_RED] = int(clr.r * alpha);
		args[LIGHT_GREEN] = int(clr.g * alpha);
		args[LIGHT_BLUE] = int(clr.b * alpha);
		args[LIGHT_INTENSITY] = int(maxradius * scale.y * alpha * !bDormant);

		if (master && spawnoffset != (0, 0, 0)) { Rotate(); }

		Super.Tick();
	}

	void Rotate()
	{
		Vector2 temp = RotateVector((spawnoffset.y, spawnoffset.z), master.roll);
		Vector3 offset = (spawnoffset.x, temp.x, temp.y);

		temp = RotateVector((offset.x, offset.z), 360 - master.pitch);
		offset = (temp.x, offset.y, temp.y);

		temp = RotateVector((offset.x, offset.y), master.angle);
		offset = (temp.x, temp.y, offset.z);

		offset.x *= master.scale.x;
		offset.y *= master.scale.x;
		offset.z *= master.scale.y;

		SetOrigin(master.pos + offset, true);
	}
}

class AttenuatedAlphaLight : AlphaLight replaces PointLightAttenuated
{
	double user_lightlevel;

	Default
	{
		//$Sprite internal:Light
		+DYNAMICLIGHT.ATTENUATE
	}

	override void BeginPlay()
	{
		clr.r = args[LIGHT_RED];
		clr.g = args[LIGHT_GREEN];
		clr.b = args[LIGHT_BLUE];
		maxradius = args[LIGHT_INTENSITY];

		Super.BeginPlay();
	}

	override void PostBeginPlay()
	{
		if (!user_lightlevel) { user_lightlevel = 5.0; }

		Super.PostBeginPlay();

		alpha = user_lightlevel;
		scale.y = scale.y / user_lightlevel;
	}

	override void Tick()
	{
		if (IsFrozen()) { return; }

		Super.Tick();

		if (!bDormant && !tid)
		{
			double dist = Distance3D(players[consoleplayer].mo);
			if (!flickertime && dist < 196.0) { Activate(self); }
		}

		if (level.time < flickertime)
		{
			args[LIGHT_INTENSITY] = (flickertime - level.time > 35) ? 0 : Random(int(maxradius / 4), int(maxradius));
		}
		else if (level.time == flickertime)
		{
			args[LIGHT_INTENSITY] = int(maxradius);
		}
	}

	override void Activate(Actor activator)
	{
		if ((!master || master is "LightSpawner") && level.time > 35)
		{
			flickertime = level.time + Random(15, 45);

			Super.Activate(activator);
		}
	}
}

class LightSpawner : Actor
{
	Line linedef;
	double linelength;
	int user_rows, user_cols, user_rowsize, user_colsize;

	Default
	{
		+NOINTERACTION
		+INVISIBLE
		Height 0;
		Radius 16;
	}

	States
	{
		Spawn:
			UNKN A 1;
			Loop;
	}

	override void PostBeginPlay()
	{
		linedef = GetClosestLine();

		if (!linedef)
		{
			Destroy(); 
			return;
		}

		TextureID tex;

		if (linedef.sidedef[0] && !linedef.sidedef[1]) { DoLights(linedef.sidedef[0].GetTexture(Side.mid)); }
		else if (linedef.sidedef[1] && !linedef.sidedef[0]) { DoLights(linedef.sidedef[1].GetTexture(Side.mid)); }
		else if (user_rows && user_cols && user_rowsize && user_colsize)
		{
			SpawnLights(user_rows, user_cols, user_rowsize, user_colsize);
		}
		else
		{
			for (int i = 0; i < 3; i++)
			{
				if (linedef.sidedef[0])
				{
					DoLights(linedef.sidedef[0].GetTexture(i), linedef.backsector.LowestFloorAt(pos.xy - RotateVector((-4.0, 0), angle)), linedef.backsector.HighestCeilingAt(pos.xy - RotateVector((-4.0, 0), angle)));
				}
	
				if (linedef.sidedef[1])
				{
					DoLights(linedef.sidedef[1].GetTexture(i), linedef.frontsector.LowestFloorAt(pos.xy - RotateVector((-4.0, 0), angle)), linedef.frontsector.HighestCeilingAt(pos.xy - RotateVector((-4.0, 0), angle)));
				}
			}
		}

		Super.PostBeginPlay();
	}

	Line GetClosestLine()
	{
		// Find the line that this actor's centerpoint is closest to
		Line linedef;
		double dist;

		BlockLinesIterator it = BlockLinesIterator.Create(self);

		While (it.Next())
		{
			Line current = it.curline;

			// Discard lines that definitely don't cross the actor's center point
			if (
				(current.v1.p.x > pos.x + radius && current.v2.p.x > pos.x + radius) ||
				(current.v1.p.x < pos.x - radius && current.v2.p.x < pos.x - radius) ||
				(current.v1.p.y > pos.y + radius && current.v2.p.y > pos.y + radius) ||
				(current.v1.p.y < pos.y - radius && current.v2.p.y < pos.y - radius) 
			) { continue; }

			// Find the line that is closest based on proximity to end vertices
			double curdist = (current.v1.p - pos.xy + current.v2.p - pos.xy).Length();
			if (!linedef || curdist <= dist)
			{
				linedef = current;
				dist = curdist;
			}
		}

		return linedef;
	}

	void DoLights(TextureID tex, double bottom = 0, double top = 0)
	{
		if (!tex) { return; }
		if (!bottom) { bottom = floorz; }
		if (!top) { top = ceilingz; }

		if (bottom == top)
		{
			if (bottom > pos.z) { bottom = floorz; }
			else if (top < pos.z) { top = ceilingz; }
		}

		String texname = TexMan.GetName(tex);

		if (texname.Left(3) ~== "LIT" || texname.Left(3) ~== "LIW")
		{
			int cols, rows, colsize, rowsize;

			if (texname.Mid(4, 1) ~== "W")
			{
				if (texname.Mid(2, 1) ~== "W")
				{
					cols = int(linedef.delta.Length() / 64);
					rows = int((top - bottom) / 16);
					colsize = 64;
					rowsize = 16;
				}
				else
				{
					cols = int(linedef.delta.Length() / 16);
					rows = int((top - bottom) / 64);
					colsize = 16;
					rowsize = 64;
				}
			}
			else
			{
				if (texname.Mid(2, 1) ~== "W")
				{
					cols = int(linedef.delta.Length() / 16);
					rows = int((top - bottom) / 32);
					colsize = 16;
					rowsize = 32;
				}
				else
				{
					cols = int(linedef.delta.Length() / 32);
					rows = int((top - bottom) / 16);
					colsize = 32;
					rowsize = 16;
				}
			}

			SpawnLights(rows, cols, rowsize, colsize);
		}
	}

	void SpawnLights(int rows, int cols, int rowsize, int colsize)
	{
		int rowpos = -(rows * rowsize) / 2 + rowsize / 2;
		int colpos = -(cols * colsize) / 2 + colsize / 2;
		int basecolpos = colpos;
		for (int r = 0; r < rows; r++)
		{
			for (int c = 0; c < cols; c++)
			{
				bool sp;
				Actor mo;
				[sp, mo] = A_SpawnItemEx("AttenuatedAlphaLight", 4.0, colpos, rowpos);
				if (sp && mo)
				{
					mo.master = self;

					AlphaLight(mo).clr = 0x383840;
					AlphaLight(mo).maxradius = max(rowsize, colsize) / 2;

					if (tid)
					{
						mo.ChangeTID(tid);
					}
				}

				colpos += colsize;
			}

			rowpos += rowsize;
			colpos = basecolpos;
		}
	}
}